{"ast":null,"code":"import { day, getDate } from '../steps/index.js';\nimport { intlDateTimeFormatSupported } from '../locale.js'; // For compatibility with the old versions of this library.\n\nimport renameLegacyProperties from './renameLegacyProperties.js'; // Twitter-style relative date/time formatting.\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\n//\n// Seconds, minutes or hours are shown for shorter intervals,\n// and longer intervals are formatted using full date format.\n\nvar steps = [{\n  formatAs: 'second'\n}, {\n  formatAs: 'minute'\n}, {\n  formatAs: 'hour'\n}]; // A cache for `Intl.DateTimeFormat` formatters\n// for various locales (is a global variable).\n\nvar formatters = {}; // Starting from day intervals, output month and day.\n\nvar monthAndDay = {\n  minTime: function minTime(timestamp, _ref) {\n    var future = _ref.future,\n        getMinTimeForUnit = _ref.getMinTimeForUnit; // Returns `23.5 * 60 * 60` when `round` is \"round\",\n    // and `24 * 60 * 60` when `round` is \"floor\".\n\n    return getMinTimeForUnit('day');\n  },\n  format: function format(value, locale) {\n    /* istanbul ignore else */\n    if (!formatters[locale]) {\n      formatters[locale] = {};\n    }\n    /* istanbul ignore else */\n\n\n    if (!formatters[locale].dayMonth) {\n      // \"Apr 11\" (MMMd)\n      formatters[locale].dayMonth = new Intl.DateTimeFormat(locale, {\n        month: 'short',\n        day: 'numeric'\n      });\n    } // Output month and day.\n\n\n    return formatters[locale].dayMonth.format(getDate(value));\n  }\n}; // If the `date` happened/happens outside of current year,\n// then output day, month and year.\n// The interval should be such that the `date` lies outside of the current year.\n\nvar yearMonthAndDay = {\n  minTime: function minTime(timestamp, _ref2) {\n    var future = _ref2.future;\n\n    if (future) {\n      // January 1, 00:00, of the `date`'s year is right after\n      // the maximum `now` for formatting a future date:\n      // When `now` is before that date, the `date` is formatted as \"day/month/year\" (this step),\n      // When `now` is equal to or after that date, the `date` is formatted as \"day/month\" (another step).\n      // After that, it's hours, minutes, seconds, and after that it's no longer `future`.\n      // The date is right after the maximum `now` for formatting a future date,\n      // so subtract 1 millisecond from it.\n      var maxFittingNow = new Date(new Date(timestamp).getFullYear(), 0).getTime() - 1; // Return `minTime` (in seconds).\n\n      return (timestamp - maxFittingNow) / 1000;\n    } else {\n      // January 1, 00:00, of the year following the `date`'s year\n      // is the minimum `now` for formatting a past date:\n      // When `now` is before that date, the `date` is formatted as \"day/month\" (another step),\n      // When `now` is equal to or after that date, the `date` is formatted as \"day/month/year\" (this step).\n      // After that, it's hours, minutes, seconds, and after that it's no longer `future`.\n      var minFittingNow = new Date(new Date(timestamp).getFullYear() + 1, 0).getTime(); // Return `minTime` (in seconds).\n\n      return (minFittingNow - timestamp) / 1000;\n    }\n  },\n  format: function format(value, locale) {\n    /* istanbul ignore if */\n    if (!formatters[locale]) {\n      formatters[locale] = {};\n    }\n    /* istanbul ignore else */\n\n\n    if (!formatters[locale].dayMonthYear) {\n      // \"Apr 11, 2017\" (yMMMd)\n      formatters[locale].dayMonthYear = new Intl.DateTimeFormat(locale, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    } // Output day, month and year.\n\n\n    return formatters[locale].dayMonthYear.format(getDate(value));\n  }\n}; // If `Intl.DateTimeFormat` is supported,\n// then longer time intervals will be formatted as dates.\n\n/* istanbul ignore else */\n\nif (intlDateTimeFormatSupported()) {\n  steps.push(monthAndDay, yearMonthAndDay);\n} // Otherwise, if `Intl.DateTimeFormat` is not supported,\n// which could be the case when using Internet Explorer,\n// then simply mimick \"round\" steps.\nelse {\n  steps.push({\n    formatAs: 'day'\n  }, {\n    formatAs: 'week'\n  }, {\n    formatAs: 'month'\n  }, {\n    formatAs: 'year'\n  });\n}\n\nexport default {\n  steps: steps,\n  labels: [// \"mini\" labels are only defined for a few languages.\n  'mini', // \"short-time\" labels are only defined for a few languages.\n  'short-time', // \"narrow\" and \"short\" labels are defined for all languages.\n  // \"narrow\" labels can sometimes be weird (like \"+5d.\"),\n  // but \"short\" labels have the \" ago\" part, so \"narrow\" seem\n  // more appropriate.\n  // \"short\" labels would have been more appropriate if they\n  // didn't have the \" ago\" part, hence the \"short-time\" above.\n  'narrow', // Since \"narrow\" labels are always present, \"short\" element\n  // of this array can be removed.\n  'short']\n};","map":{"version":3,"names":["day","getDate","intlDateTimeFormatSupported","renameLegacyProperties","steps","formatAs","formatters","monthAndDay","minTime","timestamp","_ref","future","getMinTimeForUnit","format","value","locale","dayMonth","Intl","DateTimeFormat","month","yearMonthAndDay","_ref2","maxFittingNow","Date","getFullYear","getTime","minFittingNow","dayMonthYear","year","push","labels"],"sources":["/Users/sushee/Desktop/CodeStates/pre-project/seb39_pre_052/node_modules/javascript-time-ago/modules/style/twitter.js"],"sourcesContent":["import { day, getDate } from '../steps/index.js';\nimport { intlDateTimeFormatSupported } from '../locale.js'; // For compatibility with the old versions of this library.\n\nimport renameLegacyProperties from './renameLegacyProperties.js'; // Twitter-style relative date/time formatting.\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\n//\n// Seconds, minutes or hours are shown for shorter intervals,\n// and longer intervals are formatted using full date format.\n\nvar steps = [{\n  formatAs: 'second'\n}, {\n  formatAs: 'minute'\n}, {\n  formatAs: 'hour'\n}]; // A cache for `Intl.DateTimeFormat` formatters\n// for various locales (is a global variable).\n\nvar formatters = {}; // Starting from day intervals, output month and day.\n\nvar monthAndDay = {\n  minTime: function minTime(timestamp, _ref) {\n    var future = _ref.future,\n        getMinTimeForUnit = _ref.getMinTimeForUnit;\n    // Returns `23.5 * 60 * 60` when `round` is \"round\",\n    // and `24 * 60 * 60` when `round` is \"floor\".\n    return getMinTimeForUnit('day');\n  },\n  format: function format(value, locale) {\n    /* istanbul ignore else */\n    if (!formatters[locale]) {\n      formatters[locale] = {};\n    }\n    /* istanbul ignore else */\n\n\n    if (!formatters[locale].dayMonth) {\n      // \"Apr 11\" (MMMd)\n      formatters[locale].dayMonth = new Intl.DateTimeFormat(locale, {\n        month: 'short',\n        day: 'numeric'\n      });\n    } // Output month and day.\n\n\n    return formatters[locale].dayMonth.format(getDate(value));\n  }\n}; // If the `date` happened/happens outside of current year,\n// then output day, month and year.\n// The interval should be such that the `date` lies outside of the current year.\n\nvar yearMonthAndDay = {\n  minTime: function minTime(timestamp, _ref2) {\n    var future = _ref2.future;\n\n    if (future) {\n      // January 1, 00:00, of the `date`'s year is right after\n      // the maximum `now` for formatting a future date:\n      // When `now` is before that date, the `date` is formatted as \"day/month/year\" (this step),\n      // When `now` is equal to or after that date, the `date` is formatted as \"day/month\" (another step).\n      // After that, it's hours, minutes, seconds, and after that it's no longer `future`.\n      // The date is right after the maximum `now` for formatting a future date,\n      // so subtract 1 millisecond from it.\n      var maxFittingNow = new Date(new Date(timestamp).getFullYear(), 0).getTime() - 1; // Return `minTime` (in seconds).\n\n      return (timestamp - maxFittingNow) / 1000;\n    } else {\n      // January 1, 00:00, of the year following the `date`'s year\n      // is the minimum `now` for formatting a past date:\n      // When `now` is before that date, the `date` is formatted as \"day/month\" (another step),\n      // When `now` is equal to or after that date, the `date` is formatted as \"day/month/year\" (this step).\n      // After that, it's hours, minutes, seconds, and after that it's no longer `future`.\n      var minFittingNow = new Date(new Date(timestamp).getFullYear() + 1, 0).getTime(); // Return `minTime` (in seconds).\n\n      return (minFittingNow - timestamp) / 1000;\n    }\n  },\n  format: function format(value, locale) {\n    /* istanbul ignore if */\n    if (!formatters[locale]) {\n      formatters[locale] = {};\n    }\n    /* istanbul ignore else */\n\n\n    if (!formatters[locale].dayMonthYear) {\n      // \"Apr 11, 2017\" (yMMMd)\n      formatters[locale].dayMonthYear = new Intl.DateTimeFormat(locale, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    } // Output day, month and year.\n\n\n    return formatters[locale].dayMonthYear.format(getDate(value));\n  }\n}; // If `Intl.DateTimeFormat` is supported,\n// then longer time intervals will be formatted as dates.\n\n/* istanbul ignore else */\n\nif (intlDateTimeFormatSupported()) {\n  steps.push(monthAndDay, yearMonthAndDay);\n} // Otherwise, if `Intl.DateTimeFormat` is not supported,\n// which could be the case when using Internet Explorer,\n// then simply mimick \"round\" steps.\nelse {\n  steps.push({\n    formatAs: 'day'\n  }, {\n    formatAs: 'week'\n  }, {\n    formatAs: 'month'\n  }, {\n    formatAs: 'year'\n  });\n}\n\nexport default {\n  steps: steps,\n  labels: [// \"mini\" labels are only defined for a few languages.\n  'mini', // \"short-time\" labels are only defined for a few languages.\n  'short-time', // \"narrow\" and \"short\" labels are defined for all languages.\n  // \"narrow\" labels can sometimes be weird (like \"+5d.\"),\n  // but \"short\" labels have the \" ago\" part, so \"narrow\" seem\n  // more appropriate.\n  // \"short\" labels would have been more appropriate if they\n  // didn't have the \" ago\" part, hence the \"short-time\" above.\n  'narrow', // Since \"narrow\" labels are always present, \"short\" element\n  // of this array can be removed.\n  'short']\n};\n//# sourceMappingURL=twitter.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module"}