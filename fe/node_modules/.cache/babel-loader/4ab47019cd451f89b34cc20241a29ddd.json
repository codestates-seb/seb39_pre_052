{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport RelativeTimeFormatPolyfill from 'relative-time-format';\nimport Cache from './cache.js';\nimport chooseLocale from './locale.js';\nimport isStyleObject from './isStyleObject.js';\nimport getStep from './steps/getStep.js';\nimport getStepDenominator from './steps/getStepDenominator.js';\nimport getTimeToNextUpdate from './steps/getTimeToNextUpdate.js';\nimport { addLocaleData, getLocaleData } from './LocaleDataStore.js';\nimport defaultStyle from './style/roundMinute.js';\nimport getStyleByName from './style/getStyleByName.js';\nimport { getRoundFunction } from './round.js'; // Valid time units.\n\nvar UNITS = ['now', // The rest are the same as in `Intl.RelativeTimeFormat`.\n'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'];\n\nvar TimeAgo = /*#__PURE__*/function () {\n  /**\r\n   * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n   * @param {boolean} [polyfill] — Pass `false` to use native `Intl.RelativeTimeFormat` and `Intl.PluralRules` instead of the polyfills.\r\n   */\n  function TimeAgo() {\n    var locales = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        polyfill = _ref.polyfill;\n\n    _classCallCheck(this, TimeAgo); // Convert `locales` to an array.\n\n\n    if (typeof locales === 'string') {\n      locales = [locales];\n    } // Choose the most appropriate locale\n    // from the list of `locales` added by the user.\n    // For example, new TimeAgo(\"en-US\") -> \"en\".\n\n\n    this.locale = chooseLocale(locales.concat(TimeAgo.getDefaultLocale()), getLocaleData);\n\n    if (typeof Intl !== 'undefined') {\n      // Use `Intl.NumberFormat` for formatting numbers (when available).\n      if (Intl.NumberFormat) {\n        this.numberFormat = new Intl.NumberFormat(this.locale);\n      }\n    } // Some people have requested the ability to use native\n    // `Intl.RelativeTimeFormat` and `Intl.PluralRules`\n    // instead of the polyfills.\n    // https://github.com/catamphetamine/javascript-time-ago/issues/21\n\n\n    if (polyfill === false) {\n      this.IntlRelativeTimeFormat = Intl.RelativeTimeFormat;\n      this.IntlPluralRules = Intl.PluralRules;\n    } else {\n      this.IntlRelativeTimeFormat = RelativeTimeFormatPolyfill;\n      this.IntlPluralRules = RelativeTimeFormatPolyfill.PluralRules;\n    } // Cache `Intl.RelativeTimeFormat` instance.\n\n\n    this.relativeTimeFormatCache = new Cache(); // Cache `Intl.PluralRules` instance.\n\n    this.pluralRulesCache = new Cache();\n  }\n  /**\r\n   * Formats relative date/time.\r\n   *\r\n   * @param {(number|Date)} input — A `Date` or a javascript timestamp.\r\n   *\r\n   * @param {(string|object)} style — Date/time formatting style. Either one of the built-in style names or a \"custom\" style definition object having `steps: object[]` and `labels: string[]`.\r\n   *\r\n   * @param {number} [options.now] - Sets the current date timestamp.\r\n   *\r\n   * @param  {boolean} [options.future] — Tells how to format value `0`:\r\n   *         as \"future\" (`true`) or \"past\" (`false`).\r\n   *         Is `false` by default, but should have been `true` actually,\r\n   *         in order to correspond to `Intl.RelativeTimeFormat`\r\n   *         that uses `future` formatting for `0` unless `-0` is passed.\r\n   *\r\n   * @param {string} [options.round] — Rounding method. Overrides the style's one.\r\n   *\r\n   * @param {boolean} [options.getTimeToNextUpdate] — Pass `true` to return `[formattedDate, timeToNextUpdate]` instead of just `formattedDate`.\r\n   *\r\n   * @return {string} The formatted relative date/time. If no eligible `step` is found, then an empty string is returned.\r\n   */\n\n\n  _createClass(TimeAgo, [{\n    key: \"format\",\n    value: function format(input, style, options) {\n      if (!options) {\n        if (style && !isStyle(style)) {\n          options = style;\n          style = undefined;\n        } else {\n          options = {};\n        }\n      }\n\n      if (!style) {\n        style = defaultStyle;\n      }\n\n      if (typeof style === 'string') {\n        style = getStyleByName(style);\n      }\n\n      var timestamp = getTimestamp(input); // Get locale messages for this type of labels.\n      // \"flavour\" is a legacy name for \"labels\".\n\n      var _this$getLabels = this.getLabels(style.flavour || style.labels),\n          labels = _this$getLabels.labels,\n          labelsType = _this$getLabels.labelsType;\n\n      var now; // Can pass a custom `now`, e.g. for testing purposes.\n      //\n      // Legacy way was passing `now` in `style`.\n      // That way is deprecated.\n\n      if (style.now !== undefined) {\n        now = style.now;\n      } // The new way is passing `now` option to `.format()`.\n\n\n      if (now === undefined && options.now !== undefined) {\n        now = options.now;\n      }\n\n      if (now === undefined) {\n        now = Date.now();\n      } // how much time has passed (in seconds)\n\n\n      var secondsPassed = (now - timestamp) / 1000; // in seconds\n\n      var future = options.future || secondsPassed < 0;\n      var nowLabel = getNowLabel(labels, getLocaleData(this.locale).now, getLocaleData(this.locale)[\"long\"], future); // `custom` – A function of `{ elapsed, time, date, now, locale }`.\n      //\n      // Looks like `custom` function is deprecated and will be removed\n      // in the next major version.\n      //\n      // If this function returns a value, then the `.format()` call will return that value.\n      // Otherwise the relative date/time is formatted as usual.\n      // This feature is currently not used anywhere and is here\n      // just for providing the ultimate customization point\n      // in case anyone would ever need that. Prefer using\n      // `steps[step].format(value, locale)` instead.\n      //\n\n      if (style.custom) {\n        var custom = style.custom({\n          now: now,\n          date: new Date(timestamp),\n          time: timestamp,\n          elapsed: secondsPassed,\n          locale: this.locale\n        });\n\n        if (custom !== undefined) {\n          // Won't return `timeToNextUpdate` here\n          // because `custom()` seems deprecated.\n          return custom;\n        }\n      } // Get the list of available time interval units.\n\n\n      var units = getTimeIntervalMeasurementUnits( // Controlling `style.steps` through `style.units` seems to be deprecated:\n      // create a new custom `style` instead.\n      style.units, labels, nowLabel); // // If no available time unit is suitable, just output an empty string.\n      // if (units.length === 0) {\n      // \tconsole.error(`None of the \"${units.join(', ')}\" time units have been found in \"${labelsType}\" labels for \"${this.locale}\" locale.`)\n      // \treturn ''\n      // }\n\n      var round = options.round || style.round; // Choose the appropriate time measurement unit\n      // and get the corresponding rounded time amount.\n\n      var _getStep = getStep( // \"gradation\" is a legacy name for \"steps\".\n      // For historical reasons, \"approximate\" steps are used by default.\n      // In the next major version, there'll be no default for `steps`.\n      style.gradation || style.steps || defaultStyle.steps, secondsPassed, {\n        now: now,\n        units: units,\n        round: round,\n        future: future,\n        getNextStep: true\n      }),\n          _getStep2 = _slicedToArray(_getStep, 3),\n          prevStep = _getStep2[0],\n          step = _getStep2[1],\n          nextStep = _getStep2[2];\n\n      var formattedDate = this.formatDateForStep(timestamp, step, secondsPassed, {\n        labels: labels,\n        labelsType: labelsType,\n        nowLabel: nowLabel,\n        now: now,\n        future: future,\n        round: round\n      }) || '';\n\n      if (options.getTimeToNextUpdate) {\n        var timeToNextUpdate = getTimeToNextUpdate(timestamp, step, {\n          nextStep: nextStep,\n          prevStep: prevStep,\n          now: now,\n          future: future,\n          round: round\n        });\n        return [formattedDate, timeToNextUpdate];\n      }\n\n      return formattedDate;\n    }\n  }, {\n    key: \"formatDateForStep\",\n    value: function formatDateForStep(timestamp, step, secondsPassed, _ref2) {\n      var _this = this;\n\n      var labels = _ref2.labels,\n          labelsType = _ref2.labelsType,\n          nowLabel = _ref2.nowLabel,\n          now = _ref2.now,\n          future = _ref2.future,\n          round = _ref2.round; // If no step matches, then output an empty string.\n\n      if (!step) {\n        return;\n      }\n\n      if (step.format) {\n        return step.format(timestamp, this.locale, {\n          formatAs: function formatAs(unit, value) {\n            // Mimicks `Intl.RelativeTimeFormat.format()`.\n            return _this.formatValue(value, unit, {\n              labels: labels,\n              future: future\n            });\n          },\n          now: now,\n          future: future\n        });\n      } // \"unit\" is now called \"formatAs\".\n\n\n      var unit = step.unit || step.formatAs;\n\n      if (!unit) {\n        throw new Error(\"[javascript-time-ago] Each step must define either `formatAs` or `format()`. Step: \".concat(JSON.stringify(step)));\n      } // `Intl.RelativeTimeFormat` doesn't operate in \"now\" units.\n      // Therefore, threat \"now\" as a special case.\n\n\n      if (unit === 'now') {\n        return nowLabel;\n      } // Amount in units.\n\n\n      var amount = Math.abs(secondsPassed) / getStepDenominator(step); // Apply granularity to the time amount\n      // (and fallback to the previous step\n      //  if the first level of granularity\n      //  isn't met by this amount)\n      //\n      // `granularity` — (advanced) Time interval value \"granularity\".\n      // For example, it could be set to `5` for minutes to allow only 5-minute increments\n      // when formatting time intervals: `0 minutes`, `5 minutes`, `10 minutes`, etc.\n      // Perhaps this feature will be removed because there seem to be no use cases\n      // of it in the real world.\n      //\n\n      if (step.granularity) {\n        // Recalculate the amount of seconds passed based on granularity\n        amount = getRoundFunction(round)(amount / step.granularity) * step.granularity;\n      }\n\n      var valueForFormatting = -1 * Math.sign(secondsPassed) * getRoundFunction(round)(amount); // By default, this library formats a `0` in \"past\" mode,\n      // unless `future: true` option is passed.\n      // This is different to `relative-time-format`'s behavior\n      // which formats a `0` in \"future\" mode by default, unless it's a `-0`.\n      // So, convert `0` to `-0` if `future: true` option wasn't passed.\n      // `=== 0` matches both `0` and `-0`.\n\n      if (valueForFormatting === 0) {\n        if (future) {\n          valueForFormatting = 0;\n        } else {\n          valueForFormatting = -0;\n        }\n      }\n\n      switch (labelsType) {\n        case 'long':\n        case 'short':\n        case 'narrow':\n          // Format the amount using `Intl.RelativeTimeFormat`.\n          return this.getFormatter(labelsType).format(valueForFormatting, unit);\n\n        default:\n          // Format the amount.\n          // (mimicks `Intl.RelativeTimeFormat` behavior for other time label styles)\n          return this.formatValue(valueForFormatting, unit, {\n            labels: labels,\n            future: future\n          });\n      }\n    }\n    /**\r\n     * Mimicks what `Intl.RelativeTimeFormat` does for additional locale styles.\r\n     * @param  {number} value\r\n     * @param  {string} unit\r\n     * @param  {object} options.labels — Relative time labels.\r\n     * @param  {boolean} [options.future] — Tells how to format value `0`: as \"future\" (`true`) or \"past\" (`false`). Is `false` by default, but should have been `true` actually.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value, unit, _ref3) {\n      var labels = _ref3.labels,\n          future = _ref3.future;\n      return this.getFormattingRule(labels, unit, value, {\n        future: future\n      }).replace('{0}', this.formatNumber(Math.abs(value)));\n    }\n    /**\r\n     * Returns formatting rule for `value` in `units` (either in past or in future).\r\n     * @param {object} formattingRules — Relative time labels for different units.\r\n     * @param {string} unit - Time interval measurement unit.\r\n     * @param {number} value - Time interval value.\r\n     * @param  {boolean} [options.future] — Tells how to format value `0`: as \"future\" (`true`) or \"past\" (`false`). Is `false` by default.\r\n     * @return {string}\r\n     * @example\r\n     * // Returns \"{0} days ago\"\r\n     * getFormattingRule(en.long, \"day\", -2, 'en')\r\n     */\n\n  }, {\n    key: \"getFormattingRule\",\n    value: function getFormattingRule(formattingRules, unit, value, _ref4) {\n      var future = _ref4.future; // Passing the language is required in order to\n      // be able to correctly classify the `value` as a number.\n\n      var locale = this.locale;\n      formattingRules = formattingRules[unit]; // Check for a special \"compacted\" rules case:\n      // if formatting rules are the same for \"past\" and \"future\",\n      // and also for all possible `value`s, then those rules are\n      // stored as a single string.\n\n      if (typeof formattingRules === 'string') {\n        return formattingRules;\n      } // Choose either \"past\" or \"future\" based on time `value` sign.\n      // If \"past\" is same as \"future\" then they're stored as \"other\".\n      // If there's only \"other\" then it's being collapsed.\n\n\n      var pastOrFuture = value === 0 ? future ? 'future' : 'past' : value < 0 ? 'past' : 'future';\n      var quantifierRules = formattingRules[pastOrFuture] || formattingRules; // Bundle size optimization technique.\n\n      if (typeof quantifierRules === 'string') {\n        return quantifierRules;\n      } // Quantify `value`.\n\n\n      var quantifier = this.getPluralRules().select(Math.abs(value)); // \"other\" rule is supposed to always be present.\n      // If only \"other\" rule is present then \"rules\" is not an object and is a string.\n\n      return quantifierRules[quantifier] || quantifierRules.other;\n    }\n    /**\r\n     * Formats a number into a string.\r\n     * Uses `Intl.NumberFormat` when available.\r\n     * @param  {number} number\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"formatNumber\",\n    value: function formatNumber(number) {\n      return this.numberFormat ? this.numberFormat.format(number) : String(number);\n    }\n    /**\r\n     * Returns an `Intl.RelativeTimeFormat` for a given `labelsType`.\r\n     * @param {string} labelsType\r\n     * @return {object} `Intl.RelativeTimeFormat` instance\r\n     */\n\n  }, {\n    key: \"getFormatter\",\n    value: function getFormatter(labelsType) {\n      // `Intl.RelativeTimeFormat` instance creation is (hypothetically) assumed\n      // a lengthy operation so the instances are cached and reused.\n      return this.relativeTimeFormatCache.get(this.locale, labelsType) || this.relativeTimeFormatCache.put(this.locale, labelsType, new this.IntlRelativeTimeFormat(this.locale, {\n        style: labelsType\n      }));\n    }\n    /**\r\n     * Returns an `Intl.PluralRules` instance.\r\n     * @return {object} `Intl.PluralRules` instance\r\n     */\n\n  }, {\n    key: \"getPluralRules\",\n    value: function getPluralRules() {\n      // `Intl.PluralRules` instance creation is (hypothetically) assumed\n      // a lengthy operation so the instances are cached and reused.\n      return this.pluralRulesCache.get(this.locale) || this.pluralRulesCache.put(this.locale, new this.IntlPluralRules(this.locale));\n    }\n    /**\r\n     * Gets localized labels for this type of labels.\r\n     *\r\n     * @param {(string|string[])} labelsType - Relative date/time labels type.\r\n     *                                     If it's an array then all label types are tried\r\n     *                                     until a suitable one is found.\r\n     *\r\n     * @returns {Object} Returns an object of shape { labelsType, labels }\r\n     */\n\n  }, {\n    key: \"getLabels\",\n    value: function getLabels() {\n      var labelsType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : []; // Convert `labels` to an array.\n\n      if (typeof labelsType === 'string') {\n        labelsType = [labelsType];\n      } // Supports legacy \"tiny\" and \"mini-time\" label styles.\n\n\n      labelsType = labelsType.map(function (labelsType) {\n        switch (labelsType) {\n          case 'tiny':\n          case 'mini-time':\n            return 'mini';\n\n          default:\n            return labelsType;\n        }\n      }); // \"long\" labels type is the default one.\n      // (it's always present for all languages)\n\n      labelsType = labelsType.concat('long'); // Find a suitable labels type.\n\n      var localeData = getLocaleData(this.locale);\n\n      for (var _iterator = _createForOfIteratorHelperLoose(labelsType), _step; !(_step = _iterator()).done;) {\n        var _labelsType = _step.value;\n\n        if (localeData[_labelsType]) {\n          return {\n            labelsType: _labelsType,\n            labels: localeData[_labelsType]\n          };\n        }\n      }\n    }\n  }]);\n\n  return TimeAgo;\n}();\n/**\r\n * Default locale global variable.\r\n */\n\n\nexport { TimeAgo as default };\nvar defaultLocale = 'en';\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\n\nTimeAgo.getDefaultLocale = function () {\n  return defaultLocale;\n};\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\n\n\nTimeAgo.setDefaultLocale = function (locale) {\n  return defaultLocale = locale;\n};\n/**\r\n * Adds locale data for a specific locale and marks the locale as default.\r\n * @param {Object} localeData\r\n */\n\n\nTimeAgo.addDefaultLocale = function (localeData) {\n  if (defaultLocaleHasBeenSpecified) {\n    return console.error('[javascript-time-ago] `TimeAgo.addDefaultLocale()` can only be called once. To add other locales, use `TimeAgo.addLocale()`.');\n  }\n\n  defaultLocaleHasBeenSpecified = true;\n  TimeAgo.setDefaultLocale(localeData.locale);\n  TimeAgo.addLocale(localeData);\n};\n\nvar defaultLocaleHasBeenSpecified;\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\n\nTimeAgo.addLocale = function (localeData) {\n  addLocaleData(localeData);\n  RelativeTimeFormatPolyfill.addLocale(localeData);\n};\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\n\n\nTimeAgo.locale = TimeAgo.addLocale;\n/**\r\n * Adds custom labels to locale data.\r\n * @param {string} locale\r\n * @param {string} name\r\n * @param {object} labels\r\n */\n\nTimeAgo.addLabels = function (locale, name, labels) {\n  var localeData = getLocaleData(locale);\n\n  if (!localeData) {\n    addLocaleData({\n      locale: locale\n    });\n    localeData = getLocaleData(locale); // throw new Error(`[javascript-time-ago] No data for locale \"${locale}\"`)\n  }\n\n  localeData[name] = labels;\n}; // Normalizes `.format()` `time` argument.\n\n\nfunction getTimestamp(input) {\n  if (input.constructor === Date || isMockedDate(input)) {\n    return input.getTime();\n  }\n\n  if (typeof input === 'number') {\n    return input;\n  } // For some weird reason istanbul doesn't see this `throw` covered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unsupported relative time formatter input: \".concat(_typeof(input), \", \").concat(input));\n} // During testing via some testing libraries `Date`s aren't actually `Date`s.\n// https://github.com/catamphetamine/javascript-time-ago/issues/22\n\n\nfunction isMockedDate(object) {\n  return _typeof(object) === 'object' && typeof object.getTime === 'function';\n} // Get available time interval measurement units.\n\n\nfunction getTimeIntervalMeasurementUnits(allowedUnits, labels, nowLabel) {\n  // Get all time interval measurement units that're available\n  // in locale data for a given time labels style.\n  var units = Object.keys(labels); // `now` unit is handled separately and is shipped in its own `now.json` file.\n  // `now.json` isn't present for all locales, so it could be substituted with\n  // \".second.current\".\n  // Add `now` unit if it's available in locale data.\n\n  if (nowLabel) {\n    units.push('now');\n  } // If only a specific set of available time measurement units can be used\n  // then only those units are allowed (if they're present in locale data).\n\n\n  if (allowedUnits) {\n    units = allowedUnits.filter(function (unit) {\n      return unit === 'now' || units.indexOf(unit) >= 0;\n    });\n  }\n\n  return units;\n}\n\nfunction getNowLabel(labels, nowLabels, longLabels, future) {\n  var nowLabel = labels.now || nowLabels && nowLabels.now; // Specific \"now\" message form extended locale data (if present).\n\n  if (nowLabel) {\n    // Bundle size optimization technique.\n    if (typeof nowLabel === 'string') {\n      return nowLabel;\n    } // Not handling `value === 0` as `localeData.now.current` here\n    // because it wouldn't make sense: \"now\" is a moment,\n    // so one can't possibly differentiate between a\n    // \"previous\" moment, a \"current\" moment and a \"next moment\".\n    // It can only be differentiated between \"past\" and \"future\".\n\n\n    if (future) {\n      return nowLabel.future;\n    } else {\n      return nowLabel.past;\n    }\n  } // Use \".second.current\" as \"now\" message.\n\n\n  if (longLabels && longLabels.second && longLabels.second.current) {\n    return longLabels.second.current;\n  }\n}\n\nfunction isStyle(variable) {\n  return typeof variable === 'string' || isStyleObject(variable);\n}","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_createForOfIteratorHelperLoose","o","allowArrayLike","it","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","minLen","_arrayLikeToArray","n","Object","toString","slice","name","from","test","len","arr2","_i","_arr","_n","_d","_s","_e","push","err","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","RelativeTimeFormatPolyfill","Cache","chooseLocale","isStyleObject","getStep","getStepDenominator","getTimeToNextUpdate","addLocaleData","getLocaleData","defaultStyle","getStyleByName","getRoundFunction","UNITS","TimeAgo","locales","arguments","undefined","_ref","polyfill","locale","concat","getDefaultLocale","Intl","NumberFormat","numberFormat","IntlRelativeTimeFormat","RelativeTimeFormat","IntlPluralRules","PluralRules","relativeTimeFormatCache","pluralRulesCache","format","input","style","options","isStyle","timestamp","getTimestamp","_this$getLabels","getLabels","flavour","labels","labelsType","now","Date","secondsPassed","future","nowLabel","getNowLabel","custom","date","time","elapsed","units","getTimeIntervalMeasurementUnits","round","_getStep","gradation","steps","getNextStep","_getStep2","prevStep","step","nextStep","formattedDate","formatDateForStep","timeToNextUpdate","_ref2","_this","formatAs","unit","formatValue","Error","JSON","stringify","amount","Math","abs","granularity","valueForFormatting","sign","getFormatter","_ref3","getFormattingRule","replace","formatNumber","formattingRules","_ref4","pastOrFuture","quantifierRules","quantifier","getPluralRules","select","other","number","String","get","put","map","localeData","_iterator","_step","_labelsType","default","defaultLocale","setDefaultLocale","addDefaultLocale","defaultLocaleHasBeenSpecified","console","error","addLocale","addLabels","isMockedDate","getTime","object","allowedUnits","keys","filter","indexOf","nowLabels","longLabels","past","second","current","variable"],"sources":["/Users/sushee/Desktop/CodeStates/pre-project/seb39_pre_052/node_modules/javascript-time-ago/modules/TimeAgo.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport RelativeTimeFormatPolyfill from 'relative-time-format';\nimport Cache from './cache.js';\nimport chooseLocale from './locale.js';\nimport isStyleObject from './isStyleObject.js';\nimport getStep from './steps/getStep.js';\nimport getStepDenominator from './steps/getStepDenominator.js';\nimport getTimeToNextUpdate from './steps/getTimeToNextUpdate.js';\nimport { addLocaleData, getLocaleData } from './LocaleDataStore.js';\nimport defaultStyle from './style/roundMinute.js';\nimport getStyleByName from './style/getStyleByName.js';\nimport { getRoundFunction } from './round.js'; // Valid time units.\n\nvar UNITS = ['now', // The rest are the same as in `Intl.RelativeTimeFormat`.\n'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'];\n\nvar TimeAgo = /*#__PURE__*/function () {\n  /**\r\n   * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n   * @param {boolean} [polyfill] — Pass `false` to use native `Intl.RelativeTimeFormat` and `Intl.PluralRules` instead of the polyfills.\r\n   */\n  function TimeAgo() {\n    var locales = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        polyfill = _ref.polyfill;\n\n    _classCallCheck(this, TimeAgo);\n\n    // Convert `locales` to an array.\n    if (typeof locales === 'string') {\n      locales = [locales];\n    } // Choose the most appropriate locale\n    // from the list of `locales` added by the user.\n    // For example, new TimeAgo(\"en-US\") -> \"en\".\n\n\n    this.locale = chooseLocale(locales.concat(TimeAgo.getDefaultLocale()), getLocaleData);\n\n    if (typeof Intl !== 'undefined') {\n      // Use `Intl.NumberFormat` for formatting numbers (when available).\n      if (Intl.NumberFormat) {\n        this.numberFormat = new Intl.NumberFormat(this.locale);\n      }\n    } // Some people have requested the ability to use native\n    // `Intl.RelativeTimeFormat` and `Intl.PluralRules`\n    // instead of the polyfills.\n    // https://github.com/catamphetamine/javascript-time-ago/issues/21\n\n\n    if (polyfill === false) {\n      this.IntlRelativeTimeFormat = Intl.RelativeTimeFormat;\n      this.IntlPluralRules = Intl.PluralRules;\n    } else {\n      this.IntlRelativeTimeFormat = RelativeTimeFormatPolyfill;\n      this.IntlPluralRules = RelativeTimeFormatPolyfill.PluralRules;\n    } // Cache `Intl.RelativeTimeFormat` instance.\n\n\n    this.relativeTimeFormatCache = new Cache(); // Cache `Intl.PluralRules` instance.\n\n    this.pluralRulesCache = new Cache();\n  }\n  /**\r\n   * Formats relative date/time.\r\n   *\r\n   * @param {(number|Date)} input — A `Date` or a javascript timestamp.\r\n   *\r\n   * @param {(string|object)} style — Date/time formatting style. Either one of the built-in style names or a \"custom\" style definition object having `steps: object[]` and `labels: string[]`.\r\n   *\r\n   * @param {number} [options.now] - Sets the current date timestamp.\r\n   *\r\n   * @param  {boolean} [options.future] — Tells how to format value `0`:\r\n   *         as \"future\" (`true`) or \"past\" (`false`).\r\n   *         Is `false` by default, but should have been `true` actually,\r\n   *         in order to correspond to `Intl.RelativeTimeFormat`\r\n   *         that uses `future` formatting for `0` unless `-0` is passed.\r\n   *\r\n   * @param {string} [options.round] — Rounding method. Overrides the style's one.\r\n   *\r\n   * @param {boolean} [options.getTimeToNextUpdate] — Pass `true` to return `[formattedDate, timeToNextUpdate]` instead of just `formattedDate`.\r\n   *\r\n   * @return {string} The formatted relative date/time. If no eligible `step` is found, then an empty string is returned.\r\n   */\n\n\n  _createClass(TimeAgo, [{\n    key: \"format\",\n    value: function format(input, style, options) {\n      if (!options) {\n        if (style && !isStyle(style)) {\n          options = style;\n          style = undefined;\n        } else {\n          options = {};\n        }\n      }\n\n      if (!style) {\n        style = defaultStyle;\n      }\n\n      if (typeof style === 'string') {\n        style = getStyleByName(style);\n      }\n\n      var timestamp = getTimestamp(input); // Get locale messages for this type of labels.\n      // \"flavour\" is a legacy name for \"labels\".\n\n      var _this$getLabels = this.getLabels(style.flavour || style.labels),\n          labels = _this$getLabels.labels,\n          labelsType = _this$getLabels.labelsType;\n\n      var now; // Can pass a custom `now`, e.g. for testing purposes.\n      //\n      // Legacy way was passing `now` in `style`.\n      // That way is deprecated.\n\n      if (style.now !== undefined) {\n        now = style.now;\n      } // The new way is passing `now` option to `.format()`.\n\n\n      if (now === undefined && options.now !== undefined) {\n        now = options.now;\n      }\n\n      if (now === undefined) {\n        now = Date.now();\n      } // how much time has passed (in seconds)\n\n\n      var secondsPassed = (now - timestamp) / 1000; // in seconds\n\n      var future = options.future || secondsPassed < 0;\n      var nowLabel = getNowLabel(labels, getLocaleData(this.locale).now, getLocaleData(this.locale)[\"long\"], future); // `custom` – A function of `{ elapsed, time, date, now, locale }`.\n      //\n      // Looks like `custom` function is deprecated and will be removed\n      // in the next major version.\n      //\n      // If this function returns a value, then the `.format()` call will return that value.\n      // Otherwise the relative date/time is formatted as usual.\n      // This feature is currently not used anywhere and is here\n      // just for providing the ultimate customization point\n      // in case anyone would ever need that. Prefer using\n      // `steps[step].format(value, locale)` instead.\n      //\n\n      if (style.custom) {\n        var custom = style.custom({\n          now: now,\n          date: new Date(timestamp),\n          time: timestamp,\n          elapsed: secondsPassed,\n          locale: this.locale\n        });\n\n        if (custom !== undefined) {\n          // Won't return `timeToNextUpdate` here\n          // because `custom()` seems deprecated.\n          return custom;\n        }\n      } // Get the list of available time interval units.\n\n\n      var units = getTimeIntervalMeasurementUnits( // Controlling `style.steps` through `style.units` seems to be deprecated:\n      // create a new custom `style` instead.\n      style.units, labels, nowLabel); // // If no available time unit is suitable, just output an empty string.\n      // if (units.length === 0) {\n      // \tconsole.error(`None of the \"${units.join(', ')}\" time units have been found in \"${labelsType}\" labels for \"${this.locale}\" locale.`)\n      // \treturn ''\n      // }\n\n      var round = options.round || style.round; // Choose the appropriate time measurement unit\n      // and get the corresponding rounded time amount.\n\n      var _getStep = getStep( // \"gradation\" is a legacy name for \"steps\".\n      // For historical reasons, \"approximate\" steps are used by default.\n      // In the next major version, there'll be no default for `steps`.\n      style.gradation || style.steps || defaultStyle.steps, secondsPassed, {\n        now: now,\n        units: units,\n        round: round,\n        future: future,\n        getNextStep: true\n      }),\n          _getStep2 = _slicedToArray(_getStep, 3),\n          prevStep = _getStep2[0],\n          step = _getStep2[1],\n          nextStep = _getStep2[2];\n\n      var formattedDate = this.formatDateForStep(timestamp, step, secondsPassed, {\n        labels: labels,\n        labelsType: labelsType,\n        nowLabel: nowLabel,\n        now: now,\n        future: future,\n        round: round\n      }) || '';\n\n      if (options.getTimeToNextUpdate) {\n        var timeToNextUpdate = getTimeToNextUpdate(timestamp, step, {\n          nextStep: nextStep,\n          prevStep: prevStep,\n          now: now,\n          future: future,\n          round: round\n        });\n        return [formattedDate, timeToNextUpdate];\n      }\n\n      return formattedDate;\n    }\n  }, {\n    key: \"formatDateForStep\",\n    value: function formatDateForStep(timestamp, step, secondsPassed, _ref2) {\n      var _this = this;\n\n      var labels = _ref2.labels,\n          labelsType = _ref2.labelsType,\n          nowLabel = _ref2.nowLabel,\n          now = _ref2.now,\n          future = _ref2.future,\n          round = _ref2.round;\n\n      // If no step matches, then output an empty string.\n      if (!step) {\n        return;\n      }\n\n      if (step.format) {\n        return step.format(timestamp, this.locale, {\n          formatAs: function formatAs(unit, value) {\n            // Mimicks `Intl.RelativeTimeFormat.format()`.\n            return _this.formatValue(value, unit, {\n              labels: labels,\n              future: future\n            });\n          },\n          now: now,\n          future: future\n        });\n      } // \"unit\" is now called \"formatAs\".\n\n\n      var unit = step.unit || step.formatAs;\n\n      if (!unit) {\n        throw new Error(\"[javascript-time-ago] Each step must define either `formatAs` or `format()`. Step: \".concat(JSON.stringify(step)));\n      } // `Intl.RelativeTimeFormat` doesn't operate in \"now\" units.\n      // Therefore, threat \"now\" as a special case.\n\n\n      if (unit === 'now') {\n        return nowLabel;\n      } // Amount in units.\n\n\n      var amount = Math.abs(secondsPassed) / getStepDenominator(step); // Apply granularity to the time amount\n      // (and fallback to the previous step\n      //  if the first level of granularity\n      //  isn't met by this amount)\n      //\n      // `granularity` — (advanced) Time interval value \"granularity\".\n      // For example, it could be set to `5` for minutes to allow only 5-minute increments\n      // when formatting time intervals: `0 minutes`, `5 minutes`, `10 minutes`, etc.\n      // Perhaps this feature will be removed because there seem to be no use cases\n      // of it in the real world.\n      //\n\n      if (step.granularity) {\n        // Recalculate the amount of seconds passed based on granularity\n        amount = getRoundFunction(round)(amount / step.granularity) * step.granularity;\n      }\n\n      var valueForFormatting = -1 * Math.sign(secondsPassed) * getRoundFunction(round)(amount); // By default, this library formats a `0` in \"past\" mode,\n      // unless `future: true` option is passed.\n      // This is different to `relative-time-format`'s behavior\n      // which formats a `0` in \"future\" mode by default, unless it's a `-0`.\n      // So, convert `0` to `-0` if `future: true` option wasn't passed.\n      // `=== 0` matches both `0` and `-0`.\n\n      if (valueForFormatting === 0) {\n        if (future) {\n          valueForFormatting = 0;\n        } else {\n          valueForFormatting = -0;\n        }\n      }\n\n      switch (labelsType) {\n        case 'long':\n        case 'short':\n        case 'narrow':\n          // Format the amount using `Intl.RelativeTimeFormat`.\n          return this.getFormatter(labelsType).format(valueForFormatting, unit);\n\n        default:\n          // Format the amount.\n          // (mimicks `Intl.RelativeTimeFormat` behavior for other time label styles)\n          return this.formatValue(valueForFormatting, unit, {\n            labels: labels,\n            future: future\n          });\n      }\n    }\n    /**\r\n     * Mimicks what `Intl.RelativeTimeFormat` does for additional locale styles.\r\n     * @param  {number} value\r\n     * @param  {string} unit\r\n     * @param  {object} options.labels — Relative time labels.\r\n     * @param  {boolean} [options.future] — Tells how to format value `0`: as \"future\" (`true`) or \"past\" (`false`). Is `false` by default, but should have been `true` actually.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value, unit, _ref3) {\n      var labels = _ref3.labels,\n          future = _ref3.future;\n      return this.getFormattingRule(labels, unit, value, {\n        future: future\n      }).replace('{0}', this.formatNumber(Math.abs(value)));\n    }\n    /**\r\n     * Returns formatting rule for `value` in `units` (either in past or in future).\r\n     * @param {object} formattingRules — Relative time labels for different units.\r\n     * @param {string} unit - Time interval measurement unit.\r\n     * @param {number} value - Time interval value.\r\n     * @param  {boolean} [options.future] — Tells how to format value `0`: as \"future\" (`true`) or \"past\" (`false`). Is `false` by default.\r\n     * @return {string}\r\n     * @example\r\n     * // Returns \"{0} days ago\"\r\n     * getFormattingRule(en.long, \"day\", -2, 'en')\r\n     */\n\n  }, {\n    key: \"getFormattingRule\",\n    value: function getFormattingRule(formattingRules, unit, value, _ref4) {\n      var future = _ref4.future;\n      // Passing the language is required in order to\n      // be able to correctly classify the `value` as a number.\n      var locale = this.locale;\n      formattingRules = formattingRules[unit]; // Check for a special \"compacted\" rules case:\n      // if formatting rules are the same for \"past\" and \"future\",\n      // and also for all possible `value`s, then those rules are\n      // stored as a single string.\n\n      if (typeof formattingRules === 'string') {\n        return formattingRules;\n      } // Choose either \"past\" or \"future\" based on time `value` sign.\n      // If \"past\" is same as \"future\" then they're stored as \"other\".\n      // If there's only \"other\" then it's being collapsed.\n\n\n      var pastOrFuture = value === 0 ? future ? 'future' : 'past' : value < 0 ? 'past' : 'future';\n      var quantifierRules = formattingRules[pastOrFuture] || formattingRules; // Bundle size optimization technique.\n\n      if (typeof quantifierRules === 'string') {\n        return quantifierRules;\n      } // Quantify `value`.\n\n\n      var quantifier = this.getPluralRules().select(Math.abs(value)); // \"other\" rule is supposed to always be present.\n      // If only \"other\" rule is present then \"rules\" is not an object and is a string.\n\n      return quantifierRules[quantifier] || quantifierRules.other;\n    }\n    /**\r\n     * Formats a number into a string.\r\n     * Uses `Intl.NumberFormat` when available.\r\n     * @param  {number} number\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"formatNumber\",\n    value: function formatNumber(number) {\n      return this.numberFormat ? this.numberFormat.format(number) : String(number);\n    }\n    /**\r\n     * Returns an `Intl.RelativeTimeFormat` for a given `labelsType`.\r\n     * @param {string} labelsType\r\n     * @return {object} `Intl.RelativeTimeFormat` instance\r\n     */\n\n  }, {\n    key: \"getFormatter\",\n    value: function getFormatter(labelsType) {\n      // `Intl.RelativeTimeFormat` instance creation is (hypothetically) assumed\n      // a lengthy operation so the instances are cached and reused.\n      return this.relativeTimeFormatCache.get(this.locale, labelsType) || this.relativeTimeFormatCache.put(this.locale, labelsType, new this.IntlRelativeTimeFormat(this.locale, {\n        style: labelsType\n      }));\n    }\n    /**\r\n     * Returns an `Intl.PluralRules` instance.\r\n     * @return {object} `Intl.PluralRules` instance\r\n     */\n\n  }, {\n    key: \"getPluralRules\",\n    value: function getPluralRules() {\n      // `Intl.PluralRules` instance creation is (hypothetically) assumed\n      // a lengthy operation so the instances are cached and reused.\n      return this.pluralRulesCache.get(this.locale) || this.pluralRulesCache.put(this.locale, new this.IntlPluralRules(this.locale));\n    }\n    /**\r\n     * Gets localized labels for this type of labels.\r\n     *\r\n     * @param {(string|string[])} labelsType - Relative date/time labels type.\r\n     *                                     If it's an array then all label types are tried\r\n     *                                     until a suitable one is found.\r\n     *\r\n     * @returns {Object} Returns an object of shape { labelsType, labels }\r\n     */\n\n  }, {\n    key: \"getLabels\",\n    value: function getLabels() {\n      var labelsType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      // Convert `labels` to an array.\n      if (typeof labelsType === 'string') {\n        labelsType = [labelsType];\n      } // Supports legacy \"tiny\" and \"mini-time\" label styles.\n\n\n      labelsType = labelsType.map(function (labelsType) {\n        switch (labelsType) {\n          case 'tiny':\n          case 'mini-time':\n            return 'mini';\n\n          default:\n            return labelsType;\n        }\n      }); // \"long\" labels type is the default one.\n      // (it's always present for all languages)\n\n      labelsType = labelsType.concat('long'); // Find a suitable labels type.\n\n      var localeData = getLocaleData(this.locale);\n\n      for (var _iterator = _createForOfIteratorHelperLoose(labelsType), _step; !(_step = _iterator()).done;) {\n        var _labelsType = _step.value;\n\n        if (localeData[_labelsType]) {\n          return {\n            labelsType: _labelsType,\n            labels: localeData[_labelsType]\n          };\n        }\n      }\n    }\n  }]);\n\n  return TimeAgo;\n}();\n/**\r\n * Default locale global variable.\r\n */\n\n\nexport { TimeAgo as default };\nvar defaultLocale = 'en';\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\n\nTimeAgo.getDefaultLocale = function () {\n  return defaultLocale;\n};\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\n\n\nTimeAgo.setDefaultLocale = function (locale) {\n  return defaultLocale = locale;\n};\n/**\r\n * Adds locale data for a specific locale and marks the locale as default.\r\n * @param {Object} localeData\r\n */\n\n\nTimeAgo.addDefaultLocale = function (localeData) {\n  if (defaultLocaleHasBeenSpecified) {\n    return console.error('[javascript-time-ago] `TimeAgo.addDefaultLocale()` can only be called once. To add other locales, use `TimeAgo.addLocale()`.');\n  }\n\n  defaultLocaleHasBeenSpecified = true;\n  TimeAgo.setDefaultLocale(localeData.locale);\n  TimeAgo.addLocale(localeData);\n};\n\nvar defaultLocaleHasBeenSpecified;\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\n\nTimeAgo.addLocale = function (localeData) {\n  addLocaleData(localeData);\n  RelativeTimeFormatPolyfill.addLocale(localeData);\n};\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\n\n\nTimeAgo.locale = TimeAgo.addLocale;\n/**\r\n * Adds custom labels to locale data.\r\n * @param {string} locale\r\n * @param {string} name\r\n * @param {object} labels\r\n */\n\nTimeAgo.addLabels = function (locale, name, labels) {\n  var localeData = getLocaleData(locale);\n\n  if (!localeData) {\n    addLocaleData({\n      locale: locale\n    });\n    localeData = getLocaleData(locale); // throw new Error(`[javascript-time-ago] No data for locale \"${locale}\"`)\n  }\n\n  localeData[name] = labels;\n}; // Normalizes `.format()` `time` argument.\n\n\nfunction getTimestamp(input) {\n  if (input.constructor === Date || isMockedDate(input)) {\n    return input.getTime();\n  }\n\n  if (typeof input === 'number') {\n    return input;\n  } // For some weird reason istanbul doesn't see this `throw` covered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unsupported relative time formatter input: \".concat(_typeof(input), \", \").concat(input));\n} // During testing via some testing libraries `Date`s aren't actually `Date`s.\n// https://github.com/catamphetamine/javascript-time-ago/issues/22\n\n\nfunction isMockedDate(object) {\n  return _typeof(object) === 'object' && typeof object.getTime === 'function';\n} // Get available time interval measurement units.\n\n\nfunction getTimeIntervalMeasurementUnits(allowedUnits, labels, nowLabel) {\n  // Get all time interval measurement units that're available\n  // in locale data for a given time labels style.\n  var units = Object.keys(labels); // `now` unit is handled separately and is shipped in its own `now.json` file.\n  // `now.json` isn't present for all locales, so it could be substituted with\n  // \".second.current\".\n  // Add `now` unit if it's available in locale data.\n\n  if (nowLabel) {\n    units.push('now');\n  } // If only a specific set of available time measurement units can be used\n  // then only those units are allowed (if they're present in locale data).\n\n\n  if (allowedUnits) {\n    units = allowedUnits.filter(function (unit) {\n      return unit === 'now' || units.indexOf(unit) >= 0;\n    });\n  }\n\n  return units;\n}\n\nfunction getNowLabel(labels, nowLabels, longLabels, future) {\n  var nowLabel = labels.now || nowLabels && nowLabels.now; // Specific \"now\" message form extended locale data (if present).\n\n  if (nowLabel) {\n    // Bundle size optimization technique.\n    if (typeof nowLabel === 'string') {\n      return nowLabel;\n    } // Not handling `value === 0` as `localeData.now.current` here\n    // because it wouldn't make sense: \"now\" is a moment,\n    // so one can't possibly differentiate between a\n    // \"previous\" moment, a \"current\" moment and a \"next moment\".\n    // It can only be differentiated between \"past\" and \"future\".\n\n\n    if (future) {\n      return nowLabel.future;\n    } else {\n      return nowLabel.past;\n    }\n  } // Use \".second.current\" as \"now\" message.\n\n\n  if (longLabels && longLabels.second && longLabels.second.current) {\n    return longLabels.second.current;\n  }\n}\n\nfunction isStyle(variable) {\n  return typeof variable === 'string' || isStyleObject(variable);\n}\n//# sourceMappingURL=TimeAgo.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module"}